// Generated by CoffeeScript 1.7.1
(function() {
  var client, config, createId, createKey, createPath, crypto, deadline, entry, index, post, random, recent, recentKey, redis, root;

  redis = require('redis');

  crypto = require('crypto');

  client = redis.createClient();

  config = JSON.parse(require('fs').readFileSync('config.json'));

  createPath = function(syntax, id) {
    return '/' + syntax + '/' + id;
  };

  createKey = function(id) {
    return 'flake-' + id;
  };

  random = function() {
    return Math.floor(Math.random() * 10000);
  };

  recentKey = 'recentflakes';

  createId = function() {
    var seed;
    seed = [random(), Date.now()].join('');
    return crypto.createHash('sha1').update(seed).digest('hex').substring(0, 12);
  };

  deadline = 60 * 60 * 24 * 180;

  entry = {
    get: function(id, callback) {
      return client.get(id, callback);
    },
    put: function(id, flake, callback) {
      return client.set(id, flake, function() {
        return client.expire(id, deadline, callback);
      });
    }
  };

  recent = {
    get: function(callback) {
      return client.lrange(recentKey, 0, 20, callback);
    },
    put: function(path, callback) {
      return client.lrem(recentKey, 0, path, function() {
        return client.lpush(recentKey, path, function() {
          return client.ltrim(recentKey, 0, 100, callback);
        });
      });
    }
  };

  root = function(req, res) {
    return res.redirect(createPath(config.syntaxes[0], createId()));
  };

  index = function(req, res) {
    var format, id, syntax, _ref;
    _ref = req.params, syntax = _ref.syntax, id = _ref.id, format = _ref.format;
    return entry.get(createKey(id), function(err, flake) {
      return recent.get(function(err, recent) {
        if (format === 'plain') {
          return res.send(flake, {
            'Content-Type': 'text/plain'
          });
        }
        if (format === 'json') {
          return res.json({
            id: id,
            flake: flake
          });
        }
        return res.render('index', {
          title: 'codeflake',
          id: id,
          syntax: syntax,
          langs: config.syntaxes,
          recent: recent,
          flake: flake,
          path: createPath(syntax, id)
        });
      });
    });
  };

  post = function(req, res) {
    var flake, id, syntax;
    id = req.params.id || createId();
    syntax = req.body.syntax;
    flake = req.body.flake;
    if (!/[0-9a-z]+/.test(flake)) {
      return res.redirect('/');
    }
    return entry.put(createKey(id), req.body.flake, function() {
      var path;
      path = createPath(syntax, id);
      return recent.put(path, function() {
        return res.redirect(path);
      });
    });
  };

  exports.root = root;

  exports.index = index;

  exports.post = post;

}).call(this);
